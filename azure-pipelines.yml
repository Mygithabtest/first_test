# azure-pipelines.yml
trigger:
  - main

variables:
  namespace: 'azuredeploytest'
  helmChartPath: '$(System.DefaultWorkingDirectory)/hello-java-chart'
  releaseName: 'hello-java'

stages:
  - stage: Build
    displayName: 'Build Java Application'
    jobs:
      - job: BuildApp
        displayName: 'Build Java Application'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              ls -la
              echo "Checking if pom.xml exists:"
              if [ -f "pom.xml" ]; then echo "pom.xml found"; else echo "pom.xml NOT found"; fi
              echo "Maven version:"
              mvn --version
              echo "Starting Maven build with debug:"
              mvn -X clean package
            displayName: 'Build with Maven (Debug Mode)'

          - task: CopyFiles@2
            displayName: 'Copy JAR to staging directory'
            condition: succeeded()
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/target'
              Contents: '*.jar'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish JAR Artifact'
            condition: succeeded()
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'java-app'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Deploy to Kubernetes'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployToK8s
        displayName: 'Deploy to Kubernetes Cluster'
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          - group: KubernetesConfig
        steps:
          - script: |
              # Create kubeconfig file from variable group
              echo "$(kubeconfig)" > kubeconfig.yaml
              chmod 600 kubeconfig.yaml
              
              # Use kubectl and helm with explicit kubeconfig
              export KUBECONFIG=$(pwd)/kubeconfig.yaml
              
              # Test connection
              kubectl get namespaces
              
              # Deploy with Helm
              helm upgrade --install $(releaseName) $(helmChartPath) \
                --namespace $(namespace) \
                --set image.repository=nginx \
                --set image.tag=latest \
                --set ingress.hostname=$(releaseName).$(namespace).dev.oclc.org \
                -f $(helmChartPath)/values/dev.yaml \
                --wait --timeout 5m
            displayName: 'Deploy with Helm using kubeconfig from Variable Group'