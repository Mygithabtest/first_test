# azure-pipelines.yml
trigger:
  - main

variables:
  namespace: 'azuredeploytest'
  helmChartPath: '$(System.DefaultWorkingDirectory)/hello-java-chart'
  releaseName: 'hello-java'

stages:
  - stage: Build
    displayName: 'Build Java Application'
    jobs:
      - job: BuildApp
        displayName: 'Build Java Application'
        pool:
          name: 'Windows'
        steps:
          - task: CmdLine@2
            displayName: 'Fix PATH for System Tools'
            inputs:
              script: |
                @echo Setting up System PATH...
                set PATH=C:\Windows\System32;C:\Windows;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\wbem;C:\Program Files\Java\jdk-21.0.7\bin;C:\Program Files\Apache\apache-maven-3.9.9\bin;%PATH%
                @echo PATH is now: %PATH%

          - task: Maven@3
            displayName: 'Build Java Application'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'Path'
              jdkDirectory: 'C:\Program Files\Java\jdk-21.0.7'
              mavenVersionOption: 'Path'
              mavenPath: 'C:\Program Files\Apache\apache-maven-3.9.9'
              mavenSetM2Home: true

          - task: CopyFiles@2
            displayName: 'Copy JAR to staging directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/target'
              Contents: '*.jar'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish JAR Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'java-app'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Deploy to Kubernetes'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployToK8s
        displayName: 'Deploy to Kubernetes Cluster'
        pool:
          name: 'Windows'
        steps:
          - task: CmdLine@2
            displayName: 'Fix PATH for System Tools'
            inputs:
              script: |
                @echo Setting up System PATH...
                set PATH=C:\Windows\System32;C:\Windows;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\wbem;%PATH%

          - task: KubectlInstaller@0
            displayName: 'Install Kubectl'
            inputs:
              kubectlVersion: 'latest'

          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'latest'

          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'java-app'
              downloadPath: '$(System.ArtifactsDirectory)'

          # Download the kubeconfig file from Secure Files
          - task: DownloadSecureFile@1
            name: kubeconfig
            displayName: 'Download kubeconfig file'
            inputs:
              secureFile: 'k8s-devlab.yaml'

          # Set KUBECONFIG environment variable
          - task: CmdLine@2
            displayName: 'Set KUBECONFIG environment variable'
            inputs:
              script: |
                @echo Setting KUBECONFIG environment variable...
                set KUBECONFIG=$(kubeconfig.secureFilePath)
                @echo KUBECONFIG is set to: %KUBECONFIG%

          - task: HelmDeploy@0
            displayName: 'Deploy Helm Chart'
            inputs:
              connectionType: 'Kubernetes Service Connection using kubeconfig'
              kubeConfigVariableKey: 'KUBECONFIG'
              kubeconfig: '$(kubeconfig.secureFilePath)'
              namespace: '$(namespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(helmChartPath)'
              releaseName: '$(releaseName)'
              valueFile: '$(helmChartPath)/values/dev.yaml'
              overrideValues: |
                image.repository=nginx
                image.tag=latest
                ingress.hostname=$(releaseName).$(namespace).dev.oclc.org
              waitForExecution: true
              timeout: '5m'

          - task: CmdLine@2
            displayName: 'Print Deployment Info'
            inputs:
              script: |
                @echo Application deployed to: https://$(releaseName).$(namespace).dev.oclc.org