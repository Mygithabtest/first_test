# azure-pipelines.yml
trigger:
  - main

variables:
  namespace: 'azuredeploytest'
  helmChartPath: 'src/hello-java-chart'
  releaseName: 'hello-java'

stages:
  - stage: Build
    displayName: 'Build Java Application'
    jobs:
      - job: BuildApp
        displayName: 'Build Java Application'
        pool:
          name: 'Windows'
        steps:
          - task: CmdLine@2
            displayName: 'Fix PATH for System Tools'
            inputs:
              script: |
                @echo Setting up System PATH...
                set PATH=C:\Windows\System32;C:\Windows;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\wbem;C:\Program Files\Java\jdk-21.0.7\bin;C:\Program Files\Apache\apache-maven-3.9.9\bin;%PATH%
                @echo PATH is now: %PATH%

          # Add security scanning for Java code
          - task: MicrosoftSecurityDevOps@1
            displayName: 'Run Security Scan - Java Code'
            inputs:
              config: ''
              tools: 'bandit, eslint, java'
            continueOnError: true

          # Simpler diagnostic step
          - task: CmdLine@2
            displayName: 'Locate Security Scan Results'
            inputs:
              script: |
                @echo Looking for security scan result locations...
                
                @echo Environment variables:
                @echo Pipeline.Workspace: %PIPELINE_WORKSPACE%
                @echo Build.SourcesDirectory: %BUILD_SOURCESDIRECTORY%
                @echo Build.ArtifactStagingDirectory: %BUILD_ARTIFACTSTAGINGDIRECTORY%
                @echo Agent.BuildDirectory: %AGENT_BUILDDIRECTORY%
                
                @echo Listing top-level directories:
                dir %PIPELINE_WORKSPACE%
                dir %BUILD_SOURCESDIRECTORY%
                dir %BUILD_ARTIFACTSTAGINGDIRECTORY%
                dir %AGENT_BUILDDIRECTORY%
                
                @echo Looking for _sdt directories:
                @echo Checking if _sdt exists in Pipeline.Workspace...
                if exist %PIPELINE_WORKSPACE%\_sdt (
                  @echo Found _sdt in Pipeline.Workspace
                  dir %PIPELINE_WORKSPACE%\_sdt
                ) else (
                  @echo No _sdt in Pipeline.Workspace
                )
                
                @echo Checking if _sdt exists in Build.SourcesDirectory...
                if exist %BUILD_SOURCESDIRECTORY%\_sdt (
                  @echo Found _sdt in Build.SourcesDirectory
                  dir %BUILD_SOURCESDIRECTORY%\_sdt
                ) else (
                  @echo No _sdt in Build.SourcesDirectory
                )
                
                @echo Checking if _sdt exists in Agent.BuildDirectory...
                if exist %AGENT_BUILDDIRECTORY%\_sdt (
                  @echo Found _sdt in Agent.BuildDirectory
                  dir %AGENT_BUILDDIRECTORY%\_sdt
                ) else (
                  @echo No _sdt in Agent.BuildDirectory
                )
            condition: succeededOrFailed()

          - task: Maven@3
            displayName: 'Build Java Application'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'Path'
              jdkDirectory: 'C:\Program Files\Java\jdk-21.0.7'
              mavenVersionOption: 'Path'
              mavenPath: 'C:\Program Files\Apache\apache-maven-3.9.9'
              mavenSetM2Home: true

          - task: CopyFiles@2
            displayName: 'Copy JAR to staging directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/target'
              Contents: '*.jar'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          # Try the most likely paths for security scan results
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Security Scan Results - Try 1'
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\_sdt\logs'
              ArtifactName: 'SecurityScanResults'
              publishLocation: 'Container'
            continueOnError: true
            condition: succeededOrFailed()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Security Scan Results - Try 2'
            inputs:
              PathtoPublish: '$(Pipeline.Workspace)\_sdt\logs'
              ArtifactName: 'SecurityScanResults'
              publishLocation: 'Container'
            continueOnError: true
            condition: succeededOrFailed()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Security Scan Results - Try 3'
            inputs:
              PathtoPublish: '$(Agent.BuildDirectory)\_sdt\logs'
              ArtifactName: 'SecurityScanResults'
              publishLocation: 'Container'
            continueOnError: true
            condition: succeededOrFailed()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish JAR Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'java-app'
              publishLocation: 'Container'

  # Add security scanning for Helm chart
  - stage: SecurityAnalyzeK8s
    displayName: 'Security Analysis - K8s Templates'
    dependsOn: Build
    jobs:
      - job: ScanK8sTemplates
        displayName: 'Scan Kubernetes Templates'
        pool:
          name: 'Windows'
        steps:
          - task: CmdLine@2
            displayName: 'Fix PATH for System Tools'
            inputs:
              script: |
                @echo Setting up System PATH...
                set PATH=C:\Windows\System32;C:\Windows;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\wbem;%PATH%

          # Run security scan on Helm chart
          - task: MicrosoftSecurityDevOps@1
            displayName: 'Scan Kubernetes Templates'
            inputs:
              config: ''
              tools: 'template-analyzer, kubesec'
              # Provide path to Helm templates
              templateAnalyzerPath: '$(System.DefaultWorkingDirectory)/$(helmChartPath)/templates'
            continueOnError: true

          # Simpler diagnostic step
          - task: CmdLine@2
            displayName: 'Locate K8s Security Scan Results'
            inputs:
              script: |
                @echo Looking for security scan result locations...
                
                @echo Environment variables:
                @echo Pipeline.Workspace: %PIPELINE_WORKSPACE%
                @echo Build.SourcesDirectory: %BUILD_SOURCESDIRECTORY%
                @echo Build.ArtifactStagingDirectory: %BUILD_ARTIFACTSTAGINGDIRECTORY%
                @echo Agent.BuildDirectory: %AGENT_BUILDDIRECTORY%
                
                @echo Listing top-level directories:
                dir %PIPELINE_WORKSPACE%
                dir %BUILD_SOURCESDIRECTORY%
                dir %BUILD_ARTIFACTSTAGINGDIRECTORY%
                dir %AGENT_BUILDDIRECTORY%
                
                @echo Looking for _sdt directories:
                @echo Checking if _sdt exists in Pipeline.Workspace...
                if exist %PIPELINE_WORKSPACE%\_sdt (
                  @echo Found _sdt in Pipeline.Workspace
                  dir %PIPELINE_WORKSPACE%\_sdt
                ) else (
                  @echo No _sdt in Pipeline.Workspace
                )
                
                @echo Checking if _sdt exists in Build.SourcesDirectory...
                if exist %BUILD_SOURCESDIRECTORY%\_sdt (
                  @echo Found _sdt in Build.SourcesDirectory
                  dir %BUILD_SOURCESDIRECTORY%\_sdt
                ) else (
                  @echo No _sdt in Build.SourcesDirectory
                )
                
                @echo Checking if _sdt exists in Agent.BuildDirectory...
                if exist %AGENT_BUILDDIRECTORY%\_sdt (
                  @echo Found _sdt in Agent.BuildDirectory
                  dir %AGENT_BUILDDIRECTORY%\_sdt
                ) else (
                  @echo No _sdt in Agent.BuildDirectory
                )
            condition: succeededOrFailed()

          # Try different possible locations for security scan results
          - task: PublishBuildArtifacts@1
            displayName: 'Publish K8s Security Scan Results - Try 1'
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\_sdt\logs'
              ArtifactName: 'K8sSecurityScanResults'
              publishLocation: 'Container'
            continueOnError: true
            condition: succeededOrFailed()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish K8s Security Scan Results - Try 2'
            inputs:
              PathtoPublish: '$(Pipeline.Workspace)\_sdt\logs'
              ArtifactName: 'K8sSecurityScanResults'
              publishLocation: 'Container'
            continueOnError: true
            condition: succeededOrFailed()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish K8s Security Scan Results - Try 3'
            inputs:
              PathtoPublish: '$(Agent.BuildDirectory)\_sdt\logs'
              ArtifactName: 'K8sSecurityScanResults'
              publishLocation: 'Container'
            continueOnError: true
            condition: succeededOrFailed()

  - stage: Deploy
    displayName: 'Deploy to Kubernetes'
    dependsOn:
      - Build
      - SecurityAnalyzeK8s
    condition: succeeded()
    jobs:
      - job: DeployToK8s
        displayName: 'Deploy to Kubernetes Cluster'
        pool:
          name: 'Windows'
        steps:
          - task: CmdLine@2
            displayName: 'Fix PATH for System Tools'
            inputs:
              script: |
                @echo Setting up System PATH...
                set PATH=C:\Windows\System32;C:\Windows;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\wbem;%PATH%

          - task: KubectlInstaller@0
            displayName: 'Install Kubectl'
            inputs:
              kubectlVersion: 'latest'

          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'latest'

          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'java-app'
              downloadPath: '$(System.ArtifactsDirectory)'

          # Download the kubeconfig file
          - task: DownloadSecureFile@1
            name: kubeconfig
            displayName: 'Download kubeconfig file'
            inputs:
              secureFile: 'k8s-devlab.yaml'

          # Deploy using the existing Helm chart
          - task: CmdLine@2
            displayName: 'Deploy Helm Chart with kubeconfig and insecure flag'
            inputs:
              script: |
                @echo Deploying Helm chart with kubeconfig and insecure-skip-tls-verify flag...
                
                @echo Running Helm upgrade command...
                helm upgrade --install $(releaseName) ./$(helmChartPath) ^
                  --namespace $(namespace) ^
                  --values ./$(helmChartPath)/values/dev.yaml ^
                  --set image.repository=bitnami/nginx,image.tag=latest,ingress.hostname=$(releaseName).$(namespace).dev.oclc.org ^
                  --wait --timeout 5m ^
                  --kubeconfig $(kubeconfig.secureFilePath) ^
                  --insecure-skip-tls-verify
                
                @echo Helm deployment command completed.

          - task: CmdLine@2
            displayName: 'Print Deployment Info'
            inputs:
              script: |
                @echo Application deployed to: https://$(releaseName).$(namespace).dev.oclc.org