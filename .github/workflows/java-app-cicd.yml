name: Build, Push and Deploy

on:
  push:
    branches: [ main, feature/*, github-pipeline ]
  workflow_dispatch:

env:
  APP_NAME: 'hello-java-github'
  DOCKERHUB_REPO: 'hello-java-app'

jobs:
  build-java:
    name: Build Java Application
    runs-on: [self-hosted, Windows, X64]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java and Maven
        run: |
          echo "C:\Program Files\Java\jdk-21.0.7\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\Apache\apache-maven-3.9.9\bin" >> $env:GITHUB_PATH

      - name: Set version
        id: version
        run: |
          $VERSION = "1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build with Maven
        run: |
          mvn clean package -DskipTests
          echo "âœ“ Maven build completed"
          
          echo "=== Checking built JAR files ==="
          Get-ChildItem -Path "target" -Filter "*.jar" | Select-Object Name, Length
          
          echo "=== Checking JAR manifest (if Spring Boot) ==="
          $jarFile = Get-ChildItem -Path "target" -Filter "*.jar" | Select-Object -First 1
          if ($jarFile) {
            echo "Main JAR file: $($jarFile.Name)"
          }

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-application-${{ github.run_number }}
          path: target/*.jar
          retention-days: 1

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-java
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: java-application-${{ github.run_number }}
          path: target

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        env:
          VERSION: ${{ needs