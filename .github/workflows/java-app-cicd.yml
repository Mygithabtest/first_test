name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, github-pipeline, feature/* ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

env:
  APP_NAME: 'hello-java-github'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'hello-github-test'

jobs:
  build:
    name: Build Java App
    runs-on: [self-hosted, Windows, X64]
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-snapshot: ${{ steps.version.outputs.is-snapshot }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java and Maven
        run: |
          echo "C:\Program Files\Java\jdk-21.0.7\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\Apache\apache-maven-3.9.9\bin" >> $env:GITHUB_PATH

      - name: Set version
        id: version
        run: |
          if ("${{ github.ref_name }}" -eq "main") {
            $VERSION = "1.0.${{ github.run_number }}"
            echo "is-snapshot=false" >> $env:GITHUB_OUTPUT
            Write-Host "Release build: $VERSION"
          } else {
            $VERSION = "1.0.${{ github.run_number }}-SNAPSHOT"
            echo "is-snapshot=true" >> $env:GITHUB_OUTPUT
            Write-Host "Snapshot build: $VERSION"
          }
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app-${{ github.run_number }}
          path: target/*.jar

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.is-snapshot == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-${{ github.run_number }}
          path: target

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push snapshot image
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION"
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "Building and pushing snapshot image: $IMAGE"
          docker build -t $IMAGE .
          docker push $IMAGE

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    if: needs.build.outputs.is-snapshot == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Scout scan
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION"
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "Scanning image: $IMAGE"
          
          # Updated Docker Scout command with correct syntax
          docker scout cves --severity critical,high --format sarif --output scout-report.sarif $IMAGE || true
          
          # Also generate a summary for the workflow
          docker scout cves --severity critical,high --format table $IMAGE || true

      - name: Upload Scout results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-scout-results-${{ github.run_number }}
          path: scout-report.sarif

  deploy-development:
    name: Deploy to Development
    runs-on: [self-hosted, Windows, X64]
    needs: [build, docker, security-scan]
    if: needs.build.outputs.is-snapshot == 'true'
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Configure Kubernetes
        run: echo "${{ secrets.KUBECONFIG_CONTENT }}" | Out-File -FilePath kubeconfig.yaml -Encoding utf8

      - name: Deploy to Rancher with Helm
        env:
          VERSION: ${{ needs.build.outputs.version }}
          IMAGE: "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
        run: |
          $IMAGE_LOWER = $env:IMAGE.ToLower()
          $FULL_IMAGE = "${IMAGE_LOWER}:$($env:VERSION)"
          Write-Host "Deploying snapshot image to development: $FULL_IMAGE"
          
          $helmCmd = "C:\actions-runner\tools\helm.exe"
          if (!(Test-Path $helmCmd)) {
            $helmCmd = "helm"
          }
          
          & $helmCmd upgrade --install ${{ env.APP_NAME }} ./src/hello-java-chart `
            --namespace azuredeploytest `
            --create-namespace `
            --set image.repository=$IMAGE_LOWER `
            --set image.tag=$env:VERSION `
            --values ./src/hello-java-chart/values/dev.yaml `
            --kubeconfig kubeconfig.yaml `
            --wait --timeout 5m

  docker-release:
    name: Build Release Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.is-snapshot == 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-${{ github.run_number }}
          path: target

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release image
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION"
          IMAGE_LATEST="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          IMAGE_LATEST=$(echo "$IMAGE_LATEST" | tr '[:upper:]' '[:lower:]')
          echo "Building and pushing release image: $IMAGE"
          docker build -t $IMAGE -t $IMAGE_LATEST .
          docker push $IMAGE
          docker push $IMAGE_LATEST

  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: docker-release
    if: needs.build.outputs.is-snapshot == 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Scout scan
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION"
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "Scanning release image: $IMAGE"
          
          # Updated Docker Scout command with correct syntax
          docker scout cves --severity critical,high --format sarif --output scout-report.sarif $IMAGE || true
          
          # Also generate a summary for the workflow
          docker scout cves --severity critical,high --format table $IMAGE || true

      - name: Upload Scout results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-scout-results-release-${{ github.run_number }}
          path: scout-report.sarif

  build-release:
    name: Build Release Documentation
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.is-snapshot == 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-${{ github.run_number }}
          path: target

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build documentation
        env:
          VERSION: ${{ needs.build.outputs.version }}
          BUILD_NUMBER: ${{ github.run_number }}
          COMMIT_SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          TIMESTAMP: ${{ github.event.head_commit.timestamp }}
        run: |
          chmod +x docs/build-docs.sh
          ./docs/build-docs.sh

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build, build-release]
    if: needs.build.outputs.is-snapshot == 'false'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, build-release, security-scan-release]
    if: needs.build.outputs.is-snapshot == 'false'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-${{ github.run_number }}
          path: target

      - name: Download security scan results
        uses: actions/download-artifact@v4
        with:
          name: docker-scout-results-release-${{ github.run_number }}
          path: security-results
        continue-on-error: true

      - name: Create Release
        env:
          VERSION: ${{ needs.build.outputs.version }}
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          PAGES_URL: "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        run: |
          # Check if security scan passed
          SECURITY_STATUS="✅ Security scan completed"
          if [ -f "security-results/scout-report.sarif" ]; then
            SECURITY_STATUS="✅ Security scan completed - see artifacts for details"
          fi
          
          # Convert repository name to lowercase for Docker image
          IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION" | tr '[:upper:]' '[:lower:]')
          
          gh release create "v$VERSION" \
            --title "Release $VERSION" \
            --notes "🚀 **Release $VERSION**

          ## 📦 What's Included
          - ✅ JAR artifact: \`hello-java-app.jar\`
          - ✅ Docker image: \`$IMAGE_NAME\`
          - ✅ Documentation: [$PAGES_URL]($PAGES_URL)
          - $SECURITY_STATUS

          ## 🔗 Links
          - 📁 [Source Code](https://github.com/${{ github.repository }})
          - ⚙️ [Build Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - 📚 [Full Documentation]($PAGES_URL)
          - 🐳 [Docker Image](https://github.com/${{ github.repository }}/pkgs/container/${{ env.IMAGE_NAME }})
          - 📊 [Security Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ## 📋 Build Information
          - **Version:** $VERSION
          - **Build:** #${{ github.run_number }}
          - **Commit:** \`${{ github.sha }}\`
          - **Built by:** @${{ github.actor }}
          - **Date:** ${{ github.event.head_commit.timestamp }}

          ## 🚀 Usage
          \`\`\`bash
          # Pull and run the Docker image
          docker pull $IMAGE_NAME
          docker run -p 8080:8080 $IMAGE_NAME
          \`\`\`

          Built from commit: \`${{ github.sha }}\`" \
            target/*.jar