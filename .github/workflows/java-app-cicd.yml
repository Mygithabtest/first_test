name: Build, Push and Deploy

on:
  push:
    branches: [ main, feature/*, github-pipeline ]
  workflow_dispatch:

env:
  APP_NAME: 'hello-java-github'
  DOCKERHUB_REPO: 'hello-java-app'

jobs:
  build-and-deploy:
    name: Build, Push to DockerHub and Deploy
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java and Maven
        run: |
          echo "C:\Program Files\Java\jdk-21.0.7\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\Apache\apache-maven-3.9.9\bin" >> $env:GITHUB_PATH

      - name: Set version
        id: version
        run: |
          $VERSION = "1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build with Maven
        run: |
          mvn clean package -DskipTests
          echo "✓ Maven build completed"

      - name: Log in to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          echo "✓ Logged in to DockerHub"

      - name: Build and push Docker image
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          $IMAGE = "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:$env:VERSION"
          $LATEST = "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:latest"
          
          echo "Building Docker image: $IMAGE"
          docker build -t $IMAGE .
          
          echo "Pushing Docker image: $IMAGE"
          docker push $IMAGE
          
          if ("${{ github.ref }}" -eq "refs/heads/main") {
            docker tag $IMAGE $LATEST
            docker push $LATEST
            echo "✓ Also pushed as latest"
          }
          
          echo "✓ Docker build and push completed"

      - name: Set up kubectl and Helm
        run: |
          kubectl version --client
          helm version
          echo "✓ kubectl and helm are ready"

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | Out-File -FilePath kubeconfig.yaml -Encoding utf8
          kubectl --kubeconfig="kubeconfig.yaml" cluster-info
          echo "✓ Kubernetes configured"

      - name: Deploy to Development
        env:
          VERSION: ${{ steps.version.outputs.version }}
          IMAGE: "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}"
        run: |
          echo "=== Deploying to Development ==="
          helm upgrade --install ${{ env.APP_NAME }} ./src/hello-java-chart `
            --namespace azuredeploytest `
            --create-namespace `
            --set image.repository=$env:IMAGE `
            --set image.tag=$env:VERSION `
            --values ./src/hello-java-chart/values/dev.yaml `
            --kubeconfig kubeconfig.yaml `
            --wait --timeout 5m
          
          echo "✓ Development deployment completed"

      - name: Verify Development Deployment
        run: |
          kubectl --kubeconfig="kubeconfig.yaml" get pods -n azuredeploytest -l app.kubernetes.io/name=${{ env.APP_NAME }}
          kubectl --kubeconfig="kubeconfig.yaml" get services -n azuredeploytest

      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        env:
          VERSION: ${{ steps.version.outputs.version }}
          IMAGE: "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}"
        run: |
          echo "=== Deploying to Production ==="
          helm upgrade --install ${{ env.APP_NAME }} ./src/hello-java-chart `
            --namespace azuredeploytest `
            --set image.repository=$env:IMAGE `
            --set image.tag=$env:VERSION `
            --kubeconfig kubeconfig.yaml `
            --wait --timeout 10m
          
          echo "🚀 Production deployment completed!"

      - name: Deployment Summary
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "=================================================="
          echo "🚀 DEPLOYMENT SUMMARY"
          echo "=================================================="
          echo "📦 Version: $env:VERSION"
          echo "🐳 Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:$env:VERSION"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "✅ Development: Deployed to azuredeploytest namespace"
          if ("${{ github.ref }}" -eq "refs/heads/main") {
            echo "✅ Production: Deployed to azuredeploytest namespace"
          }
          echo "=================================================="
          # Make a small change to trigger the workflow
          echo "# Docker test successful - ready for deployment" >> README.md