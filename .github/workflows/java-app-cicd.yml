name: Java Application POC

on:
  push:
    branches: [ main, github-pipeline ]
  workflow_dispatch:

env:
  APP_NAME: 'hello-java-app'

jobs:
  build:
    name: Build Java Application
    runs-on: self-hosted
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java and Maven paths
        run: |
          echo "C:\Program Files\Java\jdk-21.0.7\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\Apache\apache-maven-3.9.9\bin" >> $env:GITHUB_PATH

      - name: Determine version
        id: version
        run: |
          $VERSION = "1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build with Maven
        run: |
          echo "Building Java application..."
          mvn clean compile -DskipTests
          echo "Build completed successfully"

      - name: Run tests
        run: |
          echo "Running tests..."
          mvn test
          echo "Tests completed"

      - name: Package application
        run: |
          echo "Packaging application..."
          mvn package -DskipTests
          echo "Packaging completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-application
          path: target/*.jar
          retention-days: 30

  test:
    name: Additional Testing
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java and Maven paths
        run: |
          echo "C:\Program Files\Java\jdk-21.0.7\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\Apache\apache-maven-3.9.9\bin" >> $env:GITHUB_PATH

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: java-application
          path: target

      - name: Integration tests
        run: |
          echo "Running integration tests..."
          echo "Integration tests passed"

      - name: Security scan simulation
        run: |
          echo "Running security scans..."
          echo "Security scan completed"

  release:
    name: Create Release
    runs-on: self-hosted
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: java-application
          path: artifacts

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: Release v${{ needs.build.outputs.version }}
          body: "Automated release from GitHub Actions POC"
          draft: false
          prerelease: false

  deploy-dev:
    name: Deploy to Development
    runs-on: self-hosted
    needs: [build, test]
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: java-application
          path: deployment-artifacts

      - name: Verify Helm chart
        run: |
          echo "Verifying Helm chart structure..."
          if (Test-Path "src\hello-java-chart") {
            echo "Helm chart found"
            Get-ChildItem -Path "src\hello-java-chart" -Recurse | Select-Object Name, FullName
          } else {
            echo "Helm chart not found"
          }

      - name: Simulate deployment
        env:
          VERSION: ${{ needs.build.outputs.version }}
          NAMESPACE: 'development'
        run: |
          echo "=== Deployment Simulation ==="
          echo "Deploying version: $env:VERSION"
          echo "Target namespace: $env:NAMESPACE"
          echo "Application: ${{ env.APP_NAME }}"
          echo "Artifacts to deploy:"
          Get-ChildItem -Path "deployment-artifacts" | Select-Object Name, Length
          echo "Deployment simulation completed successfully"

  deploy-prod:
    name: Deploy to Production
    runs-on: self-hosted
    needs: [deploy-dev, release]
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: java-application
          path: deployment-artifacts

      - name: Production deployment
        env:
          VERSION: ${{ needs.build.outputs.version }}
          NAMESPACE: 'production'
        run: |
          echo "=== Production Deployment ==="
          echo "Deploying version: $env:VERSION to PRODUCTION"
          echo "This requires manual approval via GitHub Environments"
          echo "Production deployment completed"
          echo "Application is live in production!"