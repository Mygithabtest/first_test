name: Build, Push and Deploy

on:
  push:
    branches: [ main, feature/*, github-pipeline ]
  workflow_dispatch:

env:
  APP_NAME: 'hello-java-github'
  DOCKERHUB_REPO: 'hello-java-app'

jobs:
  build-java:
    name: Build Java Application
    runs-on: [self-hosted, Windows, X64]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java and Maven
        run: |
          echo "C:\Program Files\Java\jdk-21.0.7\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\Apache\apache-maven-3.9.9\bin" >> $env:GITHUB_PATH

      - name: Set version
        id: version
        run: |
          $VERSION = "1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build with Maven
        run: |
          mvn clean package -DskipTests
          echo "‚úì Maven build completed"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-application-${{ github.run_number }}
          path: target/*.jar
          retention-days: 1

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-java
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: java-application-${{ github.run_number }}
          path: target

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        env:
          VERSION: ${{ needs.build-java.outputs.version }}
        run: |
          IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:$VERSION"
          LATEST="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:latest"
          
          echo "Building Linux Docker image: $IMAGE"
          docker build -t $IMAGE .
          
          echo "Pushing Docker image: $IMAGE"
          docker push $IMAGE
          
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag $IMAGE $LATEST
            docker push $LATEST
            echo "‚úì Also pushed as latest"
          fi
          
          echo "‚úì Docker build and push completed"

  deploy:
    name: Deploy to Kubernetes
    runs-on: [self-hosted, Windows, X64]
    needs: [build-java, build-docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl and Helm
        run: |
          & "C:\actions-runner\tools\kubectl.exe" version --client
          echo "‚úì kubectl is ready"
          & "C:\actions-runner\tools\helm.exe" version
          echo "‚úì helm is ready"

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | Out-File -FilePath kubeconfig.yaml -Encoding utf8
          & "C:\actions-runner\tools\kubectl.exe" --kubeconfig="kubeconfig.yaml" cluster-info
          echo "‚úì Kubernetes configured"

      - name: Deploy to Development
        env:
          VERSION: ${{ needs.build-java.outputs.version }}
          IMAGE: "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}"
        run: |
          echo "=== Deploying to Development ==="
          echo "Image: $env:IMAGE:$env:VERSION"
          
          & "C:\actions-runner\tools\helm.exe" upgrade --install ${{ env.APP_NAME }} ./src/hello-java-chart `
            --namespace azuredeploytest `
            --create-namespace `
            --set image.repository=$env:IMAGE `
            --set image.tag=$env:VERSION `
            --values ./src/hello-java-chart/values/dev.yaml `
            --kubeconfig kubeconfig.yaml `
            --timeout 10m `
            --debug
          
          echo "‚úì Development deployment completed"

      - name: Verify Development Deployment
        run: |
          echo "=== Checking Deployment Status ==="
          & "C:\actions-runner\tools\kubectl.exe" --kubeconfig="kubeconfig.yaml" get pods -n azuredeploytest -l app.kubernetes.io/name=${{ env.APP_NAME }}
          & "C:\actions-runner\tools\kubectl.exe" --kubeconfig="kubeconfig.yaml" get services -n azuredeploytest
          
          echo "=== Checking Ingress ==="
          & "C:\actions-runner\tools\kubectl.exe" --kubeconfig="kubeconfig.yaml" get ingress -n azuredeploytest

  summary:
    name: POC Success Summary
    runs-on: ubuntu-latest
    needs: [build-java, build-docker, deploy]
    if: always()
    steps:
      - name: POC Results
        env:
          VERSION: ${{ needs.build-java.outputs.version }}
        run: |
          echo "=================================================="
          echo "üéØ GITLAB ‚Üí GITHUB ACTIONS POC RESULTS"
          echo "=================================================="
          echo "‚úÖ SUCCESSFUL MIGRATION DEMONSTRATION!"
          echo ""
          echo "üìä Pipeline Components:"
          echo "  üî® Java Build: Windows Self-hosted Runner"
          echo "  üê≥ Docker Build: GitHub Linux Runner" 
          echo "  ‚ò∏Ô∏è  Kubernetes Deploy: Windows Self-hosted Runner"
          echo ""
          echo "üì¶ Artifacts:"
          echo "  Version: $VERSION"
          echo "  DockerHub: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:$VERSION"
          echo "  Namespace: azuredeploytest"
          echo "  URL: https://hello-java-github.azuredeploytest.dev.oclc.org"
          echo ""
          echo "üèÜ POC ACHIEVEMENTS:"
          echo "  ‚úÖ Multi-stage CI/CD pipeline"
          echo "  ‚úÖ Container registry integration"
          echo "  ‚úÖ Kubernetes deployment with Helm"
          echo "  ‚úÖ Self-hosted + Cloud runner hybrid"
          echo "  ‚úÖ Secrets management"
          echo "  ‚úÖ Environment-specific deployments"
          echo ""
          echo "üéâ CONCLUSION: GitLab CI/CD functionality"
          echo "   successfully replicated in GitHub Actions!"
          echo "=================================================="