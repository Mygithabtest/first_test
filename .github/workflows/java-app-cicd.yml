name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/*, github-pipeline ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  APP_NAME: 'hello-java-github'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'hello-github-test'

jobs:
  build:
    name: Build Java App
    runs-on: [self-hosted, Windows, X64]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java and Maven
        run: |
          echo "C:\Program Files\Java\jdk-21.0.7\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\Apache\apache-maven-3.9.9\bin" >> $env:GITHUB_PATH

      - name: Set version
        id: version
        run: |
          $VERSION = "1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app-${{ github.run_number }}
          path: target/*.jar

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-${{ github.run_number }}
          path: target

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION"
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "Building and pushing image: $IMAGE"
          docker build -t $IMAGE .
          docker push $IMAGE

  deploy:
    name: Deploy to Kubernetes
    runs-on: [self-hosted, Windows, X64]
    needs: [build, docker]
    steps:
      - uses: actions/checkout@v4

      - name: Configure Kubernetes
        run: echo "${{ secrets.KUBECONFIG_CONTENT }}" | Out-File -FilePath kubeconfig.yaml -Encoding utf8

      - name: Deploy with Helm
        env:
          VERSION: ${{ needs.build.outputs.version }}
          IMAGE: "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
        run: |
          $IMAGE_LOWER = $env:IMAGE.ToLower()
          $FULL_IMAGE = "${IMAGE_LOWER}:$($env:VERSION)"
          Write-Host "Deploying image: $FULL_IMAGE"
          
          # Use full path to helm
          $helmCmd = "C:\actions-runner\tools\helm.exe"
          if (!(Test-Path $helmCmd)) {
            $helmCmd = "helm"
          }
          
          Write-Host "Using helm: $helmCmd"
          
          & $helmCmd upgrade --install ${{ env.APP_NAME }} ./src/hello-java-chart `
            --namespace azuredeploytest `
            --create-namespace `
            --set image.repository=$IMAGE_LOWER `
            --set image.tag=$env:VERSION `
            --values ./src/hello-java-chart/values/dev.yaml `
            --kubeconfig kubeconfig.yaml `
            --wait --timeout 5m `
            --debug

      - name: Quick Pod Status Check (on deployment timeout)
        if: failure()
        run: |
          Write-Host "Checking pod status after deployment timeout..."
          $kubectlPath = "C:\Program Files\kubectl\kubectl.exe"
          
          Write-Host "=== Current Pods ==="
          & $kubectlPath get pods -n azuredeploytest --kubeconfig kubeconfig.yaml -o wide
          
          Write-Host "=== Pod Events ==="
          & $kubectlPath get events -n azuredeploytest --sort-by='.lastTimestamp' --kubeconfig kubeconfig.yaml --field-selector involvedObject.kind=Pod | Select-Object -Last 10
          
          Write-Host "=== Pod Descriptions for Failed Pods ==="
          $failedPods = & $kubectlPath get pods -n azuredeploytest --kubeconfig kubeconfig.yaml -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.status.phase}{"\n"}{end}' | Where-Object { $_ -notlike "*Running*" -and $_ -notlike "*Succeeded*" }
          if ($failedPods) {
            foreach ($line in $failedPods) {
              $podName = $line.Split(' ')[0]
              if ($podName -and $podName -like "*${{ env.APP_NAME }}*") {
                Write-Host "--- Describing pod: $podName ---"
                & $kubectlPath describe pod $podName -n azuredeploytest --kubeconfig kubeconfig.yaml
              }
            }
          }

      - name: Debug Deployment (on failure)
        if: failure()
        run: |
          Write-Host "Deployment failed. Gathering debug information..."
          
          # Use absolute path to kubectl
          $kubectlPath = "C:\Program Files\kubectl\kubectl.exe"
          
          Write-Host "=== Pods Status ==="
          & $kubectlPath get pods -n azuredeploytest --kubeconfig kubeconfig.yaml
          Write-Host "=== Pod Descriptions ==="
          & $kubectlPath describe pods -n azuredeploytest --kubeconfig kubeconfig.yaml
          Write-Host "=== Recent Events ==="
          & $kubectlPath get events -n azuredeploytest --sort-by='.lastTimestamp' --kubeconfig kubeconfig.yaml
          Write-Host "=== Pod Logs ==="
          $pods = & $kubectlPath get pods -n azuredeploytest --kubeconfig kubeconfig.yaml -o jsonpath='{.items[*].metadata.name}'
          if ($pods) {
            foreach ($pod in $pods.Split(' ')) {
              if ($pod -like "*${{ env.APP_NAME }}*") {
                Write-Host "--- Logs for pod: $pod ---"
                & $kubectlPath logs $pod -n azuredeploytest --kubeconfig kubeconfig.yaml --previous=false
              }
            }
          }