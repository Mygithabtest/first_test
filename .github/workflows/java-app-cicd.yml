name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/*, github-pipeline ]
  workflow_dispatch:

env:
  APP_NAME: 'hello-java-github'
  DOCKERHUB_REPO: 'hello-java-app'

jobs:
  build-and-deploy:
    name: Build, Push and Deploy
    runs-on: [self-hosted, Windows, X64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java and Maven
        run: |
          echo "C:\Program Files\Java\jdk-21.0.7\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\Apache\apache-maven-3.9.9\bin" >> $env:GITHUB_PATH

      - name: Set version
        id: version
        run: |
          $VERSION = "1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and push Docker image
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          $IMAGE = "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:$env:VERSION"
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Configure Kubernetes
        run: echo "${{ secrets.KUBECONFIG_CONTENT }}" | Out-File -FilePath kubeconfig.yaml -Encoding utf8

      - name: Deploy with Helm
        env:
          VERSION: ${{ steps.version.outputs.version }}
          IMAGE: "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}"
        run: |
          & "C:\actions-runner\tools\helm.exe" upgrade --install ${{ env.APP_NAME }} ./src/hello-java-chart `
            --namespace azuredeploytest `
            --create-namespace `
            --set image.repository=$env:IMAGE `
            --set image.tag=$env:VERSION `
            --values ./src/hello-java-chart/values/dev.yaml `
            --kubeconfig kubeconfig.yaml `
            --wait --timeout 5m